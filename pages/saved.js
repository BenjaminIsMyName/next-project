import Head from "next/head";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import { useTranslation } from "next-i18next";
import Feed from "../components/Feed";
import { useEffect, useState } from "react";
import axios from "axios";
import Post from "../components/Post";

export default function Saved() {
  const { t } = useTranslation(["common", "menu"]);
  const THE_TITLE = `${t("popular", { ns: "menu" })} - ${t("app-name")}`;

  const [posts, setPosts] = useState([]);

  const StatusEnum = {
    loading: "Getting the saved posts",
    error: "couldn't get the saved posts",
    done: "Something went wrong...",
  };

  const [status, setStatus] = useState(StatusEnum.loading);

  useEffect(() => {
    async function get() {
      try {
        const { data } = await axios.get("/api/getSaved");
        setPosts(data.posts);
        setStatus(StatusEnum.done);
      } catch (error) {
        setStatus(StatusEnum.error);
      }
    }
    window.scrollTo(0, 0); // as we do in all feeds... (search for this line..) because otherwise - going from feed A to feed B will not jump to start
    get();
  }, [StatusEnum.done, StatusEnum.error]); // same as [] because they never change

  return (
    <>
      <Head>
        <title>{THE_TITLE}</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div className="md:p-[8%]">
        {status === StatusEnum.loading &&
          Array.apply(
            null,
            Array(Number(process.env.NEXT_PUBLIC_HOW_MANY_TO_FETCH))
          ).map((_element, index) => <Post key={index} animateProp={false} />)}
        {posts.map(p => (
          <Post
            post={p}
            key={p._id}
            unsavePostCallback={post => {
              setPosts(prev => prev.filter(i => i._id != post._id));
            }}
          />
        ))}
      </div>
    </>
  );
}

// This function gets called at build time on server-side.
// It may be called again, on a serverless function, if
// revalidation is enabled and a new request comes in
export async function getStaticProps(ctx) {
  return {
    props: {
      ...(await serverSideTranslations(ctx.locale, [
        "menu",
        "common",
        "admin",
      ])),
    },
  };
}
